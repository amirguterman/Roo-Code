// Test cases for GPT-4o computer use integration
// This file contains test cases to verify the functionality of the GPT-4o computer use capability

import { openAiNativeModels } from "../shared/api"
import { getComputerPrompt, isGPT4oModel, COMPUTER_USE_SECURITY_RULES } from "../core/prompts/computer"

// Test case 1: Verify GPT-4o has computer use capability enabled in model configuration
const testComputerUseCapability = () => {
  const modelId = "gpt-4o"
  const modelInfo = openAiNativeModels[modelId]
  
  console.log("Test 1: Computer Use Capability")
  console.log("Model ID:", modelId)
  console.log("Supports Computer Use:", modelInfo.supportsComputerUse)
  console.log("---")
  
  return modelInfo.supportsComputerUse === true
}

// Test case 2: Verify GPT-4o is correctly identified by the isGPT4oModel function
const testModelIdentification = () => {
  const modelId = "gpt-4o"
  const isGPT4o = isGPT4oModel(modelId)
  
  console.log("Test 2: Model Identification")
  console.log("Model ID:", modelId)
  console.log("Is GPT-4o:", isGPT4o)
  console.log("---")
  
  return isGPT4o === true
}

// Test case 3: Verify GPT-4o gets the correct computer prompt
const testComputerPrompt = () => {
  const modelId = "gpt-4o"
  const computerPrompt = getComputerPrompt(modelId)
  
  console.log("Test 3: Computer Prompt")
  console.log("Model ID:", modelId)
  console.log("Computer Prompt:", computerPrompt)
  console.log("---")
  
  // GPT-4o should use the DEEPSEEK_COMPUTER_PROMPT
  return computerPrompt !== null && computerPrompt.length > 0
}

// Test case 4: Verify GPT-4o generates valid JSON commands for browser navigation
const testBrowserNavigation = () => {
  const modelId = "gpt-4o"
  
  // Sample response that would be generated by GPT-4o
  const response = `{
    "actions": [
      {"type": "browser", "operation": "navigate", "target": "https://github.com"}
    ]
  }`
  
  // Parse the response manually
  let result = { success: false, actions: [] }
  try {
    const parsed = JSON.parse(response)
    if (parsed.actions && Array.isArray(parsed.actions)) {
      result = {
        success: true,
        actions: parsed.actions,
      }
    }
  } catch (error) {
    console.error("Error parsing response:", error)
  }
  
  console.log("Test 4: Browser Navigation")
  console.log("Success:", result.success)
  console.log("Actions:", JSON.stringify(result.actions, null, 2))
  console.log("---")
  
  return result.success && result.actions && result.actions.length > 0
}

// Test case 5: Verify security blocks for navigation to non-allowlisted domains
const testSecurityBlock = () => {
  const domain = "malicious-domain.com"
  const isAllowed = COMPUTER_USE_SECURITY_RULES.allowlistedDomains.includes(domain)
  
  console.log("Test 5: Security Block")
  console.log("Domain:", domain)
  console.log("Is allowed:", isAllowed)
  console.log("---")
  
  return !isAllowed
}

// Run all tests
const runAllTests = () => {
  console.log("Running all GPT-4o computer use capability tests...")
  
  const test1Result = testComputerUseCapability()
  const test2Result = testModelIdentification()
  const test3Result = testComputerPrompt()
  const test4Result = testBrowserNavigation()
  const test5Result = testSecurityBlock()
  
  console.log("Test Results Summary:")
  console.log("Test 1 (Computer Use Capability):", test1Result ? "PASS" : "FAIL")
  console.log("Test 2 (Model Identification):", test2Result ? "PASS" : "FAIL")
  console.log("Test 3 (Computer Prompt):", test3Result ? "PASS" : "FAIL")
  console.log("Test 4 (Browser Navigation):", test4Result ? "PASS" : "FAIL")
  console.log("Test 5 (Security Block):", test5Result ? "PASS" : "FAIL")
  
  const allPassed = test1Result && test2Result && test3Result && test4Result && test5Result
  console.log("All tests passed:", allPassed ? "YES" : "NO")
  
  return allPassed
}

// Export test functions
export { 
  testComputerUseCapability, 
  testModelIdentification, 
  testComputerPrompt, 
  testBrowserNavigation, 
  testSecurityBlock, 
  runAllTests 
}
